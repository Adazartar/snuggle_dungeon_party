@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
    <div class="timer">@ProduceTime(timer)</div>
    <div class="healthbars">
        @foreach (var health_component in health_components){
            <div class="healthbar">
                <div class="inner">
                    <div class="fill" style="width: @((float)health_component.current_health/health_component.max_health * 100)%"></div>
                </div>
            </div>
        }
    </div>
    <div class="abilitymeters">
        @foreach (var player in player_list){
            <div class="abilitymeter">
                <div class="inner">
                    <div class="fill" style="width: @((float)player.ability_meter/player.ability.ability_meter_max * 100)%"></div>
                </div>
            </div>
        }
    </div>
</root>

@code
{
    [Property] GameObject players = null;

    List<Player> player_list = new List<Player>();
    List<Health> health_components = new List<Health>();

    bool started = false;
    float timer = 0;

    protected override void OnUpdate(){
        if(started){
            timer += Time.Delta;
        }
    }

    public void InitialiseHud(){
        foreach(var child in players.Children){
            if(child.Enabled){
                health_components.Add(child.Components.Get<Health>());
                player_list.Add(child.Components.Get<Player>());
            }
        }
        started = true;
    }

    protected override int BuildHash(){
        List<int> current_healths = new List<int>();
        foreach(Health health_component in health_components){
            current_healths.Add(health_component.current_health);
        }

        List<int> current_ability = new List<int>();
        foreach(Player player in player_list){
            current_ability.Add(player.ability_meter);
        }
        return System.HashCode.Combine(current_healths, current_ability, timer);
    }

    private string ProduceTime(float value)
    {
        var minutes = (int)value / 60;
        var seconds = (int)value % 60;

        return $"{minutes:00}:{seconds:00}";
    }
}